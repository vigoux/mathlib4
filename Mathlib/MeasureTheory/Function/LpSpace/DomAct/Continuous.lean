import Mathlib.MeasureTheory.Function.LpSpace.DomAct.Basic
import Mathlib.MeasureTheory.Function.SimpleFuncDenseLp

open scoped ENNReal symmDiff Topology
open MeasureTheory Filter Set

namespace DomMulAct

variable {X : Type*} [TopologicalSpace X]

instance instTopologicalSpace : TopologicalSpace X·µà·µê·µÉ := .induced mk.symm  ‚Äπ_‚Ä∫

def mkHomeomorph : X ‚âÉ‚Çú X·µà·µê·µÉ where
  toEquiv := mk
  continuous_toFun := continuous_induced_rng.2 continuous_id
  continuous_invFun := continuous_induced_dom

@[simp] theorem coe_mkHomeomorph : ‚áë(mkHomeomorph : X ‚âÉ‚Çú X·µà·µê·µÉ) = mk := rfl

end DomMulAct

theorem tendsto_measure_symmDiff_preimage_nhds_zero {Œ± X Y : Type*}
    [TopologicalSpace X] [MeasurableSpace X] [BorelSpace X] [R1Space X]
    [TopologicalSpace Y] [MeasurableSpace Y] [BorelSpace Y] [R1Space Y]
    {l : Filter Œ±} {f : Œ± ‚Üí C(X, Y)} {g : C(X, Y)} {s : Set Y} {ŒºX : Measure X} {ŒºY : Measure Y}
    [ŒºX.InnerRegularCompactLTTop] [ŒºY.InnerRegularCompactLTTop] [IsLocallyFiniteMeasure ŒºY]
    (hf : ‚àÄ·∂† a in l, MeasurePreserving (f a) ŒºX ŒºY) (hg : MeasurePreserving g ŒºX ŒºY)
    (hfg : Tendsto f l (ùìù g)) (hs : MeasurableSet s) (hŒºs : ŒºY s ‚â† ‚àû) :
    Tendsto (fun a ‚Ü¶ ŒºX ((f a ‚Åª¬π' s) ‚àÜ (g ‚Åª¬π' s))) l (ùìù 0) := by
  rw [ENNReal.tendsto_nhds_zero]
  intro Œµ hŒµ
  wlog hso : IsOpen s generalizing s Œµ
  ¬∑ have H : 0 < Œµ / 3 := by simp [hŒµ.ne']
    rcases hs.exists_isOpen_symmDiff_lt hŒºs H.ne' with ‚ü®U, hUo, hU, hUs‚ü©
    filter_upwards [hf, this hUo.measurableSet hU.ne _ H hUo] with a hfa ha
    calc
      ŒºX ((f a ‚Åª¬π' s) ‚àÜ (g ‚Åª¬π' s))
        ‚â§ ŒºX ((f a ‚Åª¬π' s) ‚àÜ (f a ‚Åª¬π' U)) + ŒºX ((f a ‚Åª¬π' U) ‚àÜ (g ‚Åª¬π' U))
          + ŒºX ((g ‚Åª¬π' U) ‚àÜ (g ‚Åª¬π' s)) := by
        refine (measure_symmDiff_le _ (g ‚Åª¬π' U) _).trans ?_
        gcongr
        apply measure_symmDiff_le
      _ ‚â§ Œµ / 3 + Œµ / 3 + Œµ / 3 := by
        gcongr
        ¬∑ rw [‚Üê preimage_symmDiff, hfa.measure_preimage (hs.symmDiff hUo.measurableSet),
            symmDiff_comm]
          exact hUs.le
        ¬∑ rw [‚Üê preimage_symmDiff, hg.measure_preimage (hUo.measurableSet.symmDiff hs)]
          exact hUs.le
      _ = Œµ := by simp
  have hŒºs' : ŒºX (g ‚Åª¬π' s) ‚â† ‚àû := by rwa [hg.measure_preimage hs]
  obtain ‚ü®K, hKg, hKco, hKcl, hKŒº‚ü© :
      ‚àÉ K, MapsTo g K s ‚àß IsCompact K ‚àß IsClosed K ‚àß ŒºX (g ‚Åª¬π' s \ K) < Œµ / 2 :=
    (hs.preimage hg.measurable).exists_isCompact_isClosed_diff_lt hŒºs' <| by simp [hŒµ.ne']
  filter_upwards [hf, ContinuousMap.tendsto_nhds_compactOpen.mp hfg K hKco s hso hKg] with a hfa ha
  rw [‚Üê ENNReal.add_halves Œµ]
  refine (measure_symmDiff_le _ K _).trans ?_
  rw [symmDiff_of_ge ha.subset_preimage, symmDiff_of_le hKg.subset_preimage]
  gcongr
  have hK' : ŒºX K ‚â† ‚àû := ne_top_of_le_ne_top hŒºs' <| measure_mono hKg.subset_preimage
  rw [measure_diff_le_iff_le_add hKcl.measurableSet ha.subset_preimage hK', hfa.measure_preimage hs,
    ‚Üê hg.measure_preimage hs,
    ‚Üê measure_diff_le_iff_le_add hKcl.measurableSet hKg.subset_preimage hK']
  exact hKŒº.le

variable {M X E : Type*}
  [Monoid M] [TopologicalSpace M] [MeasurableSpace M] [BorelSpace M] [MulAction M X]
  [TopologicalSpace X] [MeasurableSpace X] [BorelSpace X] [ContinuousSMul M X]
  [R1Space X] [CompactSpace X]
  [NormedAddCommGroup E] [SecondCountableTopologyEither X E]
  {Œº : Measure X} [SMulInvariantMeasure M X Œº]
  [Œº.InnerRegularCompactLTTop] [IsLocallyFiniteMeasure Œº]
  {p : ‚Ñù‚â•0‚àû} [hp‚ÇÅ : Fact (1 ‚â§ p)] [hp : Fact (p ‚â† ‚àû)]

instance DomMulAct.instContinuousSMulLp : ContinuousSMul M·µà·µê·µÉ (Lp E p Œº) where
  continuous_smul := by
    suffices Continuous fun x : Lp E p Œº √ó M ‚Ü¶ DomMulAct.mk x.2 ‚Ä¢ x.1 by
      exact ((Homeomorph.prodComm _ _).trans <|
        mkHomeomorph.prodCongr (Homeomorph.refl _)).comp_continuous_iff'.1 this
    refine continuous_prod_of_dense_continuous_lipschitzWith _ 1
      (MeasureTheory.Lp.simpleFunc.denseRange hp.out) ?cont
      fun c ‚Ü¶ (isometry_smul _ (DomMulAct.mk c)).lipschitz
    rintro _ ‚ü®f, rfl‚ü©
    induction f using Lp.simpleFunc.induction (one_pos.trans_le hp‚ÇÅ.out).ne' hp.out with
    | @h_ind c s hs hŒºs =>
      dsimp [mk_smul_indicatorConstLp]
      refine continuous_indicatorConstLp_set hp.out fun a ‚Ü¶ ?_
      have := (ContinuousMap.mk _ continuous_smul : C(M √ó X, X)).curry.continuousAt a
      have := tendsto_measure_symmDiff_preimage_nhds_zero (ŒºX := Œº) ?_ ?_ this hs hŒºs.ne
      exact this
      exact eventually_of_forall fun _ ‚Ü¶ measurePreserving_smul _ _
      apply measurePreserving_smul
    | h_add hfp hgp _ hf hg =>
      exact hf.add hg
